{"version":3,"sources":["components/SignIn/SignIn.jsx","components/Register/Register.jsx","components/Navigation/Navigation.jsx","components/Logo/Logo.jsx","components/ImageLinkForm/ImageLinkForm.jsx","components/Rank/Rank.jsx","components/FaceRecognition/FaceRecognition.jsx","API/Clarifai.jsx","App.jsx","serviceWorker.js","index.js","components/Logo/brain.png"],"names":["SignIn","props","handleUsernameChange","handlePasswordChange","onRouteChange","className","id","htmlFor","onChange","type","name","onClick","value","href","Register","Navigation","isSignedIn","Logo","options","max","style","height","width","src","brainLogo","alt","padding","ImageLinkForm","handleInputChange","submitImage","Rank","FaceRecognition","imageUrl","box","top","topRow","left","leftCol","bottom","bottomRow","right","rightCol","ClarifaiAPI","clarifai","App","apiKey","particleParams","particles","number","density","enable","value_area","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","imageWidth","Number","imageHeight","top_row","left_col","right_col","bottom_row","displayFaceBox","console","log","setState","evt","userInput","target","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","username","password","route","toLowerCase","this","params","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"mUAuCeA,EArCA,SAACC,GAAW,IAEfC,EAA8DD,EAA9DC,qBAAsBC,EAAwCF,EAAxCE,qBAAsBC,EAAkBH,EAAlBG,cAEpD,OACI,6BAASC,UAAU,kEAEf,0BAAMA,UAAU,gBACZ,yBAAKA,UAAU,WACX,8BAAUC,GAAG,UAAUD,UAAU,6BAC7B,4BAAQA,UAAU,kBAAlB,WACA,yBAAKA,UAAU,OACX,2BAAOA,UAAU,oBAAoBE,QAAQ,iBAA7C,YACA,2BAAOC,SAAUN,EAAsBG,UAAU,qEAAqEI,KAAK,QAAQC,KAAK,gBAAgBJ,GAAG,mBAE/J,yBAAKD,UAAU,OACX,2BAAOA,UAAU,oBAAoBE,QAAQ,YAA7C,YACA,2BAAOC,SAAUL,EAAsBE,UAAU,uEAAuEI,KAAK,WAAWC,KAAK,WAAWJ,GAAG,eAGnK,yBAAKD,UAAU,IACX,2BACIM,QAAS,kBAAMP,EAAc,SAC7BC,UAAU,uEACVI,KAAK,SACLG,MAAM,aAGd,yBAAKP,UAAU,eACX,uBAAGM,QAAS,kBAAMP,EAAc,aAAaS,KAAK,KAAKR,UAAU,gCAAjE,iBCSTS,EAtCE,SAACb,GAId,OACI,6BAASI,UAAU,kEAEf,0BAAMA,UAAU,gBACZ,yBAAKA,UAAU,WACX,8BAAUC,GAAG,UAAUD,UAAU,6BAC7B,4BAAQA,UAAU,kBAAlB,YACA,yBAAKA,UAAU,OACX,2BAAOA,UAAU,oBAAoBE,QAAQ,QAA7C,QACA,2BAAOF,UAAU,qEAAqEI,KAAK,OAAOC,KAAK,OAAOJ,GAAG,UAErH,yBAAKD,UAAU,OACX,2BAAOA,UAAU,oBAAoBE,QAAQ,iBAA7C,SACA,2BAAOF,UAAU,qEAAqEI,KAAK,QAAQC,KAAK,gBAAgBJ,GAAG,mBAE/H,yBAAKD,UAAU,OACX,2BAAOA,UAAU,oBAAoBE,QAAQ,YAA7C,YACA,2BAAOF,UAAU,uEAAuEI,KAAK,WAAWC,KAAK,WAAWJ,GAAG,eAGnI,yBAAKD,UAAU,IACX,2BAEIA,UAAU,uEACVI,KAAK,SACLG,MAAM,kBCVnBG,G,OAlBI,SAACd,GAAW,IAEnBG,EAA8BH,EAA9BG,cAER,OAFsCH,EAAfe,WAIb,yBAAKX,UAAU,cACb,uBAAGM,QAAS,kBAAMP,EAAc,YAAYC,UAAU,2CAAtD,aAGJ,yBAAKA,UAAU,cACX,uBAAGM,QAAS,kBAAMP,EAAc,WAAWC,UAAU,2CAArD,WACA,uBAAGM,QAAS,kBAAMP,EAAc,aAAaC,UAAU,2CAAvD,e,kCCEDY,G,OAZF,WACT,OACI,yBAAKZ,UAAU,YACX,kBAAC,IAAD,CAAMA,UAAU,oBAAoBa,QAAS,CAAEC,IAAK,IAAMC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,MACnF,yBAAKjB,UAAU,kBACX,yBAAKkB,IAAKC,IAAWC,IAAI,OAAOL,MAAO,CAAEC,OAAQ,OAAQC,MAAO,OAAQI,QAAS,cCatFC,G,OApBO,SAAC1B,GAAW,IAEtB2B,EAAmC3B,EAAnC2B,kBAAmBC,EAAgB5B,EAAhB4B,YAE3B,OACI,6BACI,uBAAGxB,UAAU,MAAb,iEAIA,yBAAKA,UAAU,UACX,yBAAKA,UAAU,gCACX,2BAAOA,UAAU,qBAAqBI,KAAK,OAAOD,SAAUoB,IAC5D,4BAAQvB,UAAU,sDAAsDM,QAASkB,GAAjF,eCALC,EAdF,WACT,OAEI,6BACI,yBAAKzB,UAAU,YACV,oCAEL,yBAAKA,UAAU,YACV,SCYF0B,G,OAnBS,SAAC9B,GAAW,IAExB+B,EAAkB/B,EAAlB+B,SAAUC,EAAQhC,EAARgC,IAElB,OACI,yBAAK5B,UAAU,aACX,yBAAKA,UAAU,gBACX,yBAAKC,GAAG,aAAaiB,IAAKS,EAAUP,IAAI,GAAGH,MAAM,QAAQD,OAAO,SAChE,yBAAKhB,UAAU,eAAee,MAAO,CACjCc,IAAKD,EAAIE,OACTC,KAAMH,EAAII,QACVC,OAAQL,EAAIM,UACZC,MAAOP,EAAIQ,gB,kCCThBC,EAJK,IAAIC,IAASC,IAAI,CACjCC,OAAQ,qCCWNC,G,OAAiB,CACrBC,UAAW,CACTC,OAAQ,CACNpC,MAAO,IACPqC,QAAS,CACPC,QAAQ,EACRC,WAAY,SAwHLP,E,kDAhHb,aAAe,IAAD,8BACZ,gBAaFQ,sBAAwB,SAACC,GACvB,IAAIC,EAAeD,EAAKE,QAAQ,GAAGF,KAAKG,QAAQ,GAAGC,YAAYC,aAC3DC,EAAQC,SAASC,eAAe,cAChCC,EAAaC,OAAOJ,EAAMrC,OAC1B0C,EAAcD,OAAOJ,EAAMtC,QAE/B,MAAO,CACLc,OAAQmB,EAAaW,QAAUD,EAC/B3B,QAASiB,EAAaY,SAAWJ,EACjCrB,SAAUqB,EAAcR,EAAaa,UAAYL,EACjDvB,UAAWyB,EAAeV,EAAac,WAAaJ,IAxB1C,EA4BdK,eAAiB,SAACpC,GAChBqC,QAAQC,IAAItC,GACZ,EAAKuC,SAAS,CAAEvC,SA9BJ,EAiCdL,kBAAoB,SAAC6C,GACnB,EAAKD,SAAS,CAAEE,UAAWD,EAAIE,OAAO/D,SAlC1B,EAqCdiB,YAAc,WACZ,EAAK2C,SAAS,CAAExC,SAAU,EAAK4C,MAAMF,YAErChC,EAAYmC,OAAOC,QACjBnC,IAASoC,kBACT,EAAKH,MAAMF,WAEVM,MAAK,SAAAC,GAAQ,OAAI,EAAKZ,eAAe,EAAKjB,sBAAsB6B,OAChEC,OAAM,SAAAC,GAAG,OAAIb,QAAQC,IAAI,SAAUY,OA7C1B,EAgDdjF,qBAAuB,SAACuE,GACtB,EAAKD,SAAS,CAAEY,SAAUX,EAAIE,OAAO/D,SAjDzB,EAoDdT,qBAAuB,SAACsE,GACtB,EAAKD,SAAS,CAAEa,SAAUZ,EAAIE,OAAO/D,SArDzB,EAwDdR,cAAgB,SAACkF,GACD,YAAVA,GACF,EAAKd,SAAS,CAAExD,YAAY,IAMhB,SAAVsE,GACuC,SAAtC,EAAKV,MAAMQ,SAASG,eACI,QAAxB,EAAKX,MAAMS,SAKF,aAAVC,GAAkC,WAAVA,GAAgC,YAAVA,GAChD,EAAKd,SAAS,CAAEc,UALhB,EAAKd,SAAS,CAAExD,YAAY,EAAMsE,WAjEpC,EAAKV,MAAQ,CACXQ,SAAU,GACVC,SAAU,GAEVX,UAAW,GACX1C,SAAU,GACVC,IAAK,GACLqD,MAAO,SACPtE,YAAY,GAVF,E,qDA6EJ,IAAD,EACsCwE,KAAKZ,MAA1C5D,EADD,EACCA,WAAYgB,EADb,EACaA,SAAUsD,EADvB,EACuBA,MAAOrD,EAD9B,EAC8BA,IAErC,OACE,yBAAK5B,UAAU,OACb,kBAAC,IAAD,CAAWA,UAAU,YACnBoF,OAAQ3C,IACV,kBAAC,EAAD,CAAY9B,WAAYA,EAAYZ,cAAeoF,KAAKpF,gBAE5C,SAAVkF,EACI,6BACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,MACA,kBAAC,EAAD,CACE1D,kBAAmB4D,KAAK5D,kBACxBC,YAAa2D,KAAK3D,cACpB,kBAAC,EAAD,CAAiBI,IAAKA,EAAKD,SAAUA,KAG3B,WAAVsD,EACI,kBAAC,EAAD,CACApF,qBAAsBsF,KAAKtF,qBAC3BC,qBAAsBqF,KAAKrF,qBAC3BC,cAAeoF,KAAKpF,gBACpB,kBAAC,EAAD,CAAUA,cAAeoF,KAAKpF,qB,GAxG9BsF,aCdEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtC,SAASC,eAAe,SDwHpB,kBAAmBsC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLlC,QAAQkC,MAAMA,EAAMC,a,mBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.2ac60eae.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SignIn = (props) => {\r\n\r\n    const { handleUsernameChange, handlePasswordChange, onRouteChange } = props;\r\n\r\n    return (\r\n        <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n\r\n            <main className=\"pa4 black-80\">\r\n                <div className=\"measure\">\r\n                    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                        <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\r\n                        <div className=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Username</label>\r\n                            <input onChange={handleUsernameChange} className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\" id=\"email-address\" />\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                            <input onChange={handlePasswordChange} className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\" id=\"password\" />\r\n                        </div>\r\n                    </fieldset>\r\n                    <div className=\"\">\r\n                        <input\r\n                            onClick={() => onRouteChange(\"home\")}\r\n                            className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                            type=\"submit\"\r\n                            value=\"Sign in\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"lh-copy mt3\">\r\n                        <p onClick={() => onRouteChange(\"register\")} href=\"#0\" className=\"f6 link dim black db pointer\">Register</p>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </article>\r\n    );\r\n}\r\n\r\nexport default SignIn;","import React from 'react';\r\n\r\nconst Register = (props) => {\r\n\r\n    // const { onRouteChange } = props;\r\n\r\n    return (\r\n        <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n\r\n            <main className=\"pa4 black-80\">\r\n                <div className=\"measure\">\r\n                    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                        <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\r\n                        <div className=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Name</label>\r\n                            <input className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"text\" name=\"name\" id=\"name\" />\r\n                        </div>\r\n                        <div className=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                            <input className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"email\" name=\"email-address\" id=\"email-address\" />\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                            <input className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" type=\"password\" name=\"password\" id=\"password\" />\r\n                        </div>\r\n                    </fieldset>\r\n                    <div className=\"\">\r\n                        <input\r\n                            // onClick={() => onRouteChange(\"home\")}\r\n                            className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                            type=\"submit\"\r\n                            value=\"Register\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </article>\r\n    );\r\n}\r\n\r\nexport default Register;","import React from 'react'\r\nimport './Navigation.css'\r\n\r\nconst Navigation = (props) => {\r\n\r\n    const { onRouteChange, isSignedIn } = props;\r\n\r\n    return (\r\n        isSignedIn\r\n            ? <div className=\"navigation\">\r\n                <p onClick={() => onRouteChange(\"signout\")} className=\"f3 link dim black underline pa3 pointer\">Sign Out</p>\r\n            </div>\r\n            :\r\n            <div className=\"navigation\">\r\n                <p onClick={() => onRouteChange(\"signin\")} className=\"f3 link dim black underline pa3 pointer\">Sign In</p>\r\n                <p onClick={() => onRouteChange(\"register\")} className=\"f3 link dim black underline pa3 pointer\">Register</p>\r\n            </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Tilt from 'react-tilt'\r\nimport brainLogo from './brain.png'\r\nimport './Logo.css'\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className=\"ma4 mt0 \">\r\n            <Tilt className=\"Tilt br2 shadow-2\" options={{ max: 55 }} style={{ height: 120, width: 120 }} >\r\n                <div className=\"Tilt-inner pa3\">\r\n                    <img src={brainLogo} alt=\"Logo\" style={{ height: '80px', width: '80px', padding: '5px' }}/>\r\n                </div>\r\n            </Tilt>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './ImageLinkForm.css'\r\n\r\nconst ImageLinkForm = (props) => {\r\n\r\n    const { handleInputChange, submitImage } = props;\r\n\r\n    return (\r\n        <div>\r\n            <p className=\"f3\">\r\n                SmartBrain will detect faces in your pictures. Give it a try!\r\n            </p>\r\n\r\n            <div className=\"center\">\r\n                <div className=\"form center pa4 br3 shadow-5\">\r\n                    <input className=\"f4 pa2 w-70 center\" type=\"text\" onChange={handleInputChange} />\r\n                    <button className=\"w-30 grow f4 link ph3 pv2 dib white bg-light-purple\" onClick={submitImage}>Detect</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageLinkForm;","import React from 'react';\r\n\r\nconst Rank = () => {\r\n    return (\r\n        // Hard code. TODO: Make it dinamic\r\n        <div>\r\n            <div className=\"white f3\">\r\n                {\"Carlos, your current ranks is...\"}\r\n            </div>\r\n            <div className=\"white f1\">\r\n                {\"#12\"}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Rank;","import React from 'react';\r\nimport './FaceRecognition.css'\r\n\r\nconst FaceRecognition = (props) => {\r\n\r\n    const { imageUrl, box } = props;\r\n\r\n    return (\r\n        <div className=\"center ma\">\r\n            <div className=\"absolute mt3\">\r\n                <img id=\"inputImage\" src={imageUrl} alt=\"\" width=\"500px\" height=\"auto\"/>\r\n                <div className=\"bounding-box\" style={{\r\n                    top: box.topRow,\r\n                    left: box.leftCol,\r\n                    bottom: box.bottomRow,\r\n                    right: box.rightCol\r\n                }} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FaceRecognition;","import clarifai from 'clarifai';\r\n\r\nconst ClarifaiAPI = new clarifai.App({\r\n    apiKey: '57707ac6ce9a459cada197cc353d842b'\r\n});\r\n\r\nexport default ClarifaiAPI;","import React, { Component } from 'react';\r\nimport SignIn from './components/SignIn/SignIn'\r\nimport Register from './components/Register/Register'\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport Logo from './components/Logo/Logo';\r\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\r\nimport Rank from './components/Rank/Rank';\r\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition'\r\nimport Particles from 'react-particles-js';\r\nimport ClarifaiAPI from './API/Clarifai';\r\nimport './App.css';\r\nimport clarifai from 'clarifai';\r\n\r\n\r\nconst particleParams = {\r\n  particles: {\r\n    number: {\r\n      value: 100,\r\n      density: {\r\n        enable: true,\r\n        value_area: 800\r\n      }\r\n    }\r\n  },\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n\r\n      userInput: \"\",\r\n      imageUrl: \"\",\r\n      box: {},\r\n      route: 'signin',\r\n      isSignedIn: false\r\n    }\r\n  }\r\n\r\n  calculateFaceLocation = (data) => {\r\n    let clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\r\n    let image = document.getElementById(\"inputImage\");\r\n    let imageWidth = Number(image.width);\r\n    let imageHeight = Number(image.height);\r\n\r\n    return {\r\n      topRow: clarifaiFace.top_row * imageHeight,\r\n      leftCol: clarifaiFace.left_col * imageWidth,\r\n      rightCol: imageWidth - (clarifaiFace.right_col * imageWidth),\r\n      bottomRow: imageHeight - (clarifaiFace.bottom_row * imageHeight)\r\n    }\r\n  }\r\n\r\n  displayFaceBox = (box) => {\r\n    console.log(box);\r\n    this.setState({ box });\r\n  }\r\n\r\n  handleInputChange = (evt) => {\r\n    this.setState({ userInput: evt.target.value });\r\n  }\r\n\r\n  submitImage = () => {\r\n    this.setState({ imageUrl: this.state.userInput });\r\n\r\n    ClarifaiAPI.models.predict(\r\n      clarifai.FACE_DETECT_MODEL,\r\n      this.state.userInput\r\n    )\r\n      .then(response => this.displayFaceBox(this.calculateFaceLocation(response)))\r\n      .catch(err => console.log(\"Error!\", err));\r\n  }\r\n\r\n  handleUsernameChange = (evt) => {\r\n    this.setState({ username: evt.target.value });\r\n  }\r\n\r\n  handlePasswordChange = (evt) => {\r\n    this.setState({ password: evt.target.value });\r\n  }\r\n\r\n  onRouteChange = (route) => {\r\n    if (route === \"signout\") {\r\n      this.setState({ isSignedIn: false })\r\n    }\r\n    // } else if (route === \"home\") {\r\n    //   this.setState({ isSignedIn: true })\r\n    // }\r\n\r\n    if (route === \"home\"\r\n      && this.state.username.toLowerCase() === \"cdca\"\r\n      && this.state.password === \"123\") {\r\n      this.setState({ isSignedIn: true, route });\r\n      return;\r\n    }\r\n\r\n    if (route === \"register\" || route === \"signin\" || route === \"signout\") {\r\n      this.setState({ route });\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    const { isSignedIn, imageUrl, route, box } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Particles className=\"particles\"\r\n          params={particleParams} />\r\n        <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange} />\r\n        {\r\n          route === \"home\"\r\n            ? <div>\r\n              <Logo />\r\n\r\n              <Rank />\r\n              <ImageLinkForm\r\n                handleInputChange={this.handleInputChange}\r\n                submitImage={this.submitImage} />\r\n              <FaceRecognition box={box} imageUrl={imageUrl} />\r\n            </div>\r\n            : (\r\n              route === \"signin\"\r\n                ? <SignIn\r\n                  handleUsernameChange={this.handleUsernameChange}\r\n                  handlePasswordChange={this.handlePasswordChange}\r\n                  onRouteChange={this.onRouteChange} />\r\n                : <Register onRouteChange={this.onRouteChange} />\r\n            )\r\n\r\n\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/brain.4100098c.png\";"],"sourceRoot":""}